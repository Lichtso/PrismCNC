#!/usr/bin/env node

/* jslint node: true, esnext: true */
"use strict";

const fs = require('fs'),
  msgpack = require('msgpack-lite'),
  net = require('net'),
  stdin = process.openStdin();

const gears = [
    0.0,
    0.05,
    0.2,
    0.5,
    1.0,
    2.0,
    3.0
], axis = {
  x: {
    name: 'x',
    motor: 0,
    speed: 0,
    gear: 0,
    position: 0
  },
  y: {
    name: 'y',
    motor: 1,
    speed: 0,
    gear: 0,
    position: 0
  },
  z: {
    name: 'z',
    motor: 2,
    speed: 0,
    gear: 0,
    position: 0
  }
};

const decodeStream = msgpack.createDecodeStream(),
      encodeStream = msgpack.createEncodeStream();

if(process.argv.length > 2) {
  const CNCDeamon = new net.Socket();
  encodeStream.pipe(CNCDeamon);
  CNCDeamon.pipe(decodeStream).on('data', function(data) {
    switch(data.type) {
      case 'status':
        axis.x.position = data.position[0];
        axis.y.position = data.position[1];
        axis.z.position = data.position[2];
        let str = '\r\x1B[2K';
        for (let a of ['x','y','z'])
          str += `${axis[a].position.toFixed(3)} (${axis[a].gear}) `;
        str += '#'+data.verticesLeft;
        process.stdout.write(str);
        break;
      default:
        console.warn(data);
    }
  });
  console.log('Connecting to '+process.argv[2]);
  CNCDeamon.connect(3823, process.argv[2], function() {
    console.log('Ready');

    if(process.argv.length == 4)
      sendGcode(process.argv[3]);
  });
  CNCDeamon.on('close', function() {
    console.log();
    process.exit();
  });
}

const directions = {
  'd': {
    axis: axis.x,
    sign: -1
  },
  'a': {
    axis: axis.x,
    sign: 1
  },
  's': {
    axis: axis.y,
    sign: -1
  },
  'w': {
    axis: axis.y,
    sign: 1
  },
  'q': {
    axis: axis.z,
    sign: -1
  },
  'e': {
    axis: axis.z,
    sign: 1
  }
};

let lastDirection;
stdin.setRawMode(true);
stdin.resume();
stdin.setEncoding('utf8');
stdin.on('data', function(key) {
  if (key === '\u0003') { // Ctrl-C
    console.log();
    process.exit();
  }

  let type = 'run';
  switch(key) {
    /*case 'y':
      type = 'resume';
      break;*/
    case 'x':
      type = 'interrupt';
      break;
    case 'c':
      type = 'reset';
      break;
    default:
      const d = directions[key];
      if (d) {
        if (lastDirection === d) {
          if(d.axis.gear < gears.length - 1 )
            d.axis.gear += 1;
        } else {
          d.axis.gear = (lastDirection && lastDirection.axis === d.axis) ? 0 : 1;
          lastDirection = d;
        }
        d.axis.speed = d.sign * gears[d.axis.gear];
        encodeStream.write({
          'type': 'run',
          'speed': d.axis.speed,
          'motor': d.axis.motor
        });
        encodeStream._flush();
      }
      return;
  }
  encodeStream.write({'type': type});
  encodeStream._flush();
  axis.x.gear = 0;
  axis.y.gear = 0;
  axis.z.gear = 0;
});

function sendGcode(filePath) {
  let scale = 1, speed = 1, fastSeek = true, vertices = [];
  function sendPolygon(newSpeedMode) {
    if(vertices.length == 0)
      return;
    encodeStream.write({
      'type': 'polygon',
      'speed': (fastSeek) ? 3.0 : speed,
      'vertices': vertices
    });
    vertices = [];
  }
  function appendVertex(parts) {
    const vertex = [];
    for(const part of parts) {
      const axis = {'X': 0, 'Y': 1, 'Z': 2}[part[0]];
      if(axis != undefined)
        vertex[axis] = parseFloat(part.substr(1))*scale;
    }
    vertex[0] *= -1;
    vertices.push(vertex);
  }
  const file = fs.readFileSync(filePath, 'utf-8'),
        lines = file.split('\n');
  for(const line of lines) {
      const parts = line.split(' ');
      switch(parts[0]) {
        case 'F':
          speed = parseFloat(parts[0].substr(1))/60.0;
          break;
        case 'G20':
          scale = 1.0/25.4;
          break;
        case 'G21':
          scale = 1.0;
          break;
        case 'G00':
          if(!fastSeek)
            sendPolygon();
          fastSeek = true;
          appendVertex(parts);
          break;
        case 'G01':
          if(fastSeek)
            sendPolygon();
          fastSeek = false;
          appendVertex(parts);
          break;
      }
  }
  sendPolygon();
  encodeStream._flush();
}
