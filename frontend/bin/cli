#!/usr/bin/env iojs

/* jslint node: true, esnext: true */
"use strict";

const path = require('path'),
  msgpack = require('msgpack-lite'),
  net = require('net'),
  stdin = process.openStdin();
stdin.setRawMode(true);

var CNCDeamon = new net.Socket();
const encodeStream = msgpack.createEncodeStream();
encodeStream.pipe(CNCDeamon);

const axis = {
  x: {
    name: 'x',
    motor: 0,
    speed: 0,
    gear: 0,
    coord: 0
  },
  y: {
    name: 'y',
    motor: 1,
    speed: 0,
    gear: 0,
    coord: 0
  },
  z: {
    name: 'z',
    motor: 2,
    speed: 0,
    gear: 0,
    coord: 0
  }
};

const decodeStream = msgpack.createDecodeStream();
CNCDeamon.pipe(decodeStream).on('data', function (data) {
  switch (data.type) {
    case 'position':
      axis.x.coord = data.coords[0];
      axis.y.coord = data.coords[1];
      axis.z.coord = data.coords[2];

      let str = '\r\x1B[2K';

      for (let a of ['x','y','z']) {
        str += `${axis[a].coord.toFixed(3)} (${axis[a].gear}) `;
      }
      process.stdout.write(str);
      break;
    default:
      console.warn(data);
  }
});

CNCDeamon.connect(3823, '10.0.1.10', function () {
  console.log('Ready');
});

CNCDeamon.on('close', function () {
  console.log();
  process.exit();
});

const directions = {
  'd': {
    axis: axis.x,
    sign: -1
  },
  'a': {
    axis: axis.x,
    sign: 1
  },
  's': {
    axis: axis.y,
    sign: -1
  },
  'w': {
    axis: axis.y,
    sign: 1
  },
  'q': {
    axis: axis.z,
    sign: -1
  },
  'e': {
    axis: axis.z,
    sign: 1
  }
};

const gears = [
      0,
   1000,
   2500,
  10000,
  40000
];
var lastDirection;

stdin.setRawMode(true);
stdin.resume();
stdin.setEncoding('utf8');
stdin.on('data', function (key) {
  if (key === '\u0003') // Ctrl-C
    process.exit();

  switch (key) {
    case 'y':
      encodeStream.write({
        'type': 'stop'
      });
      axis.x.gear = 0;
      axis.y.gear = 0;
      axis.z.gear = 0;
      break;
    case 'x':
      encodeStream.write({
        'type': 'idle'
      });
      axis.x.gear = 0;
      axis.y.gear = 0;
      axis.z.gear = 0;
      break;
    default:
      const d = directions[key];

      if (d) {
        if (lastDirection === d) {
          if(d.axis.gear < gears.length - 1 ) d.axis.gear += 1;
        } else {
          if(lastDirection.axis === d.axis) {
            d.axis.gear = 0;
          }
          else {
            d.axis.gear = 1;
          }
          lastDirection = d;
        }

        d.axis.speed = d.sign * gears[d.axis.gear];

        encodeStream.write({
          'type': 'run',
          'speed': d.axis.speed,
          'motor': d.axis.motor
        });
      }

  }
});
