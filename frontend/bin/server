#!/usr/bin/env iojs

/* jslint node: true, esnext: true */
"use strict";

const express = require('express'),
    path = require('path'),
    msgpack = require('msgpack-lite'),
    net = require('net'),
    app = express(),
    server = require('http').Server(app),
    io = require('socket.io')(server),
    stdin = process.openStdin();
stdin.setRawMode(true);

var CNCDeamon = new net.Socket();
const encodeStream = msgpack.createEncodeStream();
encodeStream.pipe(CNCDeamon);

const decodeStream = msgpack.createDecodeStream();
CNCDeamon.pipe(decodeStream).on('data', function(data) {
    switch(data.type) {
        case 'position':
            var str = '\r\x1B[2K'+data.commandsLeft+': '+data.vertexIndex+'/'+data.vertexEndIndex+'\t';
            for(var i in data.coords)
                str += data.coords[i].toFixed(3)+' ';
            process.stdout.write(str);
        break;
        default:
            console.warn(data);
    }
});

CNCDeamon.connect(3823, '10.0.1.10', function() {
    console.log('Ready');
});

CNCDeamon.on('close', function() {
    console.log();
    process.exit();
});

var speed = 3.0;
stdin.setRawMode(true);
stdin.resume();
stdin.setEncoding('utf8');
stdin.on('data', function(key) {
    if(key === '\u0003') // Ctrl-C
        process.exit();

    switch(key) {
        case 'd':
            encodeStream.write({'type': 'run', 'speed': -speed, 'motor': 0});
        break;
        case 'a':
            encodeStream.write({'type': 'run', 'speed': speed, 'motor': 0});
        break;
        case 's':
            encodeStream.write({'type': 'run', 'speed': -speed, 'motor': 1});
        break;
        case 'w':
            encodeStream.write({'type': 'run', 'speed': speed, 'motor': 1});
        break;
        case 'q':
            encodeStream.write({'type': 'run', 'speed': -speed, 'motor': 2});
        break;
        case 'e':
            encodeStream.write({'type': 'run', 'speed': speed, 'motor': 2});
        break;
        case 'y':
            encodeStream.write({'type': 'cancel'});
        break;
        case 'x':
            encodeStream.write({'type': 'interrupt'});
        break;
        case 'r':
            encodeStream.write({'type': 'resume'});
        break;
        case 'h':
            encodeStream.write({'type': 'reset'});
        break;
        case 'o':
            encodeStream.write({'type': 'polygon', 'speed': 3.0, 'vertices': [[0, 0, 0]]});
        break;
        /*default:
            process.stdout.write(key);*/
    }
});


/*
const docroot = path.join(__dirname, '..', 'docroot');

app.use(express.static(docroot));
server.listen(80);

io.on("connection", function (socket) {
    socket.emit("news", {
        "hello": "world"
    });
    socket.on("my other event", function (data) {
        console.log(data);
    });
});
*/
